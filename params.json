{"name":"Angular Filters","tagline":"A collection of useful filters for AngularJS.","body":"A collection of useful filters for [AngularJS](http://angularjs.org/).\r\n\r\nYou can install the latest version of `angular-filters` with `bower`:\r\n\r\n```bash\r\n$ bower install angular-filters\r\n```\r\n\r\nThen, simply include `./dist/angular-filters.js` or `./dist/angular-filters.min.js` in your Web app and inject the module `frapontillo.ex.filters` in your application.\r\n\r\n## Filters specs\r\n\r\nThe included filters are:\r\n\r\n- [`bool:trueValue:falseValue`](#bool)\r\n- [`default:defaultValue`](#default)\r\n- [`firstNotNull`](#firstnotnull)\r\n- [`lastNotNull`](#lastnotnull)\r\n- [`max`](#max)\r\n- [`min`](#min)\r\n- [`property`](#property)\r\n- [`join`](#join)\r\n\r\n### bool\r\n\r\nThe `bool` filter allows to **specify true and false values** to show depending on the input value. The second parameter will be returned if and only if the first parameter is `true`; the third parameter will be returned if and only if the first parameter is `false`.\r\n\r\nThis filter can be used to print a specific message depending on a boolean value.\r\n\r\nUse it as follows:\r\n\r\n```html\r\n\t<p>{{ someBoolValue | bool:'Candies!':'No candies :(' }}</p>\r\n```\r\n\r\n```javascript\r\n\t$scope.returnValue = $filter('bool')($scope.someBoolValue, 'Candies!', 'No candies :(');\r\n```\r\n\r\n### default\r\n\r\nThe `default` filter allows to **specify a default fallback value** if an object is one of the following:\r\n\r\n- `null`\r\n- `undefined`\r\n- empty string, `''`\r\n\r\nPlease notice that if a value equals to `0`, the default value won't be returned, as `0` is accepted.\r\n\r\nThis filter is useful when another filter return is not safe and when you want to display a fallback value.\r\n\r\nUse it as follows:\r\n\r\n```html\r\n\t<p>{{ someValue | number:2 | default:'No value is available.' }}</p>\r\n```\r\n\r\n```javascript\r\n\t$scope.returnValue = $filter('default')\r\n\t\t($filter('number')($scope.someValue, 2), 'No value is available.');\r\n```\r\n\r\n### firstNotNull\r\n\r\nThe `firstNotNull` filter returns the **first element from an array** that is neither `null` or `undefined`. This means it returns all numbers and strings, even if empty. It returns `undefined` if all values aren't set or if the array is empty.\r\n\r\nUse it as follows:\r\n\r\n```html\r\n\t<p>{{ myValues | firstNotNull }}</p>\r\n```\r\n\r\n```javascript\r\n\t$scope.firstValue = $filter('firstNotNull')($scope.myValues);\r\n```\r\n\r\n### lastNotNull\r\n\r\nThe `lastNotNull` filter returns the **last element from an array** that is neither `null` or `undefined`. This means it returns all numbers and strings, even if empty. It returns `undefined` if all values aren't set or if the array is empty.\r\n\r\nUse it as follows:\r\n\r\n```html\r\n\t<p>{{ myValues | lastNotNull }}</p>\r\n```\r\n\r\n```javascript\r\n\t$scope.firstValue = $filter('lastNotNull')($scope.myValues);\r\n```\r\n\r\n### max\r\n\r\nThe `max` filter returns the **maximum value from an array** that is neither `null` or `undefined`. It returns `undefined` if all values aren't set or if the array is empty.\r\n\r\nUse it as follows:\r\n\r\n```html\r\n\t<p>{{ myValues | max }}</p>\r\n```\r\n\r\n```javascript\r\n\t$scope.maxValue = $filter('max')($scope.myValues);\r\n```\r\n\r\n### min\r\n\r\nThe `min` filter returns the **minimum value from an array** that is neither `null` or `undefined`. It returns `undefined` if all values aren't set or if the array is empty.\r\n\r\nUse it as follows:\r\n\r\n```html\r\n\t<p>{{ myValues | min }}</p>\r\n```\r\n\r\n```javascript\r\n\t$scope.minValue = $filter('min')($scope.myValues);\r\n```\r\n\r\n### property\r\n\r\nThe `property` filter returns an **array with only the specified property from the original objects**, not altering the `null` or `undefined` values.\r\n\r\nUse it as follows:\r\n\r\n```html\r\n\t<p>{{ myObjects | property:'myText' }}</p>\r\n```\r\n\r\n```javascript\r\n\t$scope.allTheTexts = $filter('property')($scope.myObjects, 'myText');\r\n```\r\n\r\n### join\r\n\r\nThe `join` filter returns **the original array as a string, with its elements joined with the specified separator**, if any, otherwise defaulting to the comma `,`.\r\n\r\nUse it as follows:\r\n\r\n```html\r\n\t<p>{{ myValues | join:', ' }}</p>\r\n```\r\n\r\n```javascript\r\n\t$scope.joinedValues = $filter('join')($scope.myValues, ', ');\r\n```\r\n\r\n## Development\r\n\r\n### Test and build\r\n\r\nTo test and build the distribution files yourself, do the following:\r\n\r\n```shell\r\nnpm install -g grunt-cli karma bower\r\nnpm install\r\nbower install\r\ngrunt\r\n```\r\n\r\nThese are the available grunt task:\r\n\r\n* `karma:travis`, run karma tests once, on PhantomJS\r\n* `karma:local`, run karma tests once, on Chrome\r\n* `karma:dev`, run karma tests indefinitely after every file change, on Chrome\r\n* `jshint:src`, run jshint on every source file\r\n* `jshint:test`, run jshint on every test file\r\n* `clean:dist`, clean the distribution directory\r\n* `clean:temp`, clean the temporary directory\r\n* `ngmin`, prepares every angular file into the `dist/.temp` directory\r\n* `concat`, concatenates the module declaration and the `ngmin`-ified file from the `dist/.temp` into the `dist` directory, adding the banner\r\n* `uglify`, minifies the output file in the `dist` directory, adding the banner\r\n* `build`, builds the regular and minified file\r\n* `test-travis`, runs `jshint` and `karma:travis`\r\n\r\nUse the default task by calling `grunt` to run tests on PhantomJS and builds the regular and minified file.\r\n\r\n### Contribute\r\n\r\nTo contribute, please follow the generic [AngularJS Contributing Guidelines](https://github.com/angular/angular.js/blob/master/CONTRIBUTING.md), with the only exception to send the PR to the `develop` branch instead of `master`.\r\n\r\n## License\r\n\r\n```\r\n  Copyright 2014 Francesco Pontillo\r\n\r\n  Licensed under the Apache License, Version 2.0 (the \"License\");\r\n  you may not use this file except in compliance with the License.\r\n  You may obtain a copy of the License at\r\n\r\n    http://www.apache.org/licenses/LICENSE-2.0\r\n\r\n  Unless required by applicable law or agreed to in writing, software\r\n  distributed under the License is distributed on an \"AS IS\" BASIS,\r\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n  See the License for the specific language governing permissions and\r\n  limitations under the License.\r\n```","google":"UA-49037569-4","note":"Don't delete this file! It's used internally to help with page regeneration."}